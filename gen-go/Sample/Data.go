// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package Sample

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TweetType int64
const (
  TweetType_TWEET TweetType = 0
  TweetType_RETWEET TweetType = 2
  TweetType_DM TweetType = 10
  TweetType_REPLY TweetType = 11
)

func (p TweetType) String() string {
  switch p {
  case TweetType_TWEET: return "TWEET"
  case TweetType_RETWEET: return "RETWEET"
  case TweetType_DM: return "DM"
  case TweetType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func TweetTypeFromString(s string) (TweetType, error) {
  switch s {
  case "TWEET": return TweetType_TWEET, nil 
  case "RETWEET": return TweetType_RETWEET, nil 
  case "DM": return TweetType_DM, nil 
  case "REPLY": return TweetType_REPLY, nil 
  }
  return TweetType(0), fmt.Errorf("not a valid TweetType string")
}


func TweetTypePtr(v TweetType) *TweetType { return &v }

func (p TweetType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TweetType) UnmarshalText(text []byte) error {
q, err := TweetTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TweetType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TweetType(v)
return nil
}

func (p * TweetType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Lists
//  - Sets
//  - Maps
type Car struct {
  Lists []int64 `thrift:"lists,1" db:"lists" json:"lists"`
  Sets []string `thrift:"sets,2" db:"sets" json:"sets"`
  Maps map[int64]string `thrift:"maps,3" db:"maps" json:"maps"`
}

func NewCar() *Car {
  return &Car{}
}


func (p *Car) GetLists() []int64 {
  return p.Lists
}

func (p *Car) GetSets() []string {
  return p.Sets
}

func (p *Car) GetMaps() map[int64]string {
  return p.Maps
}
func (p *Car) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Car)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Lists =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Lists = append(p.Lists, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Car)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Sets =  tSet
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.Sets = append(p.Sets, _elem1)
  }
  if err := iprot.ReadSetEnd(ctx); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *Car)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int64]string, size)
  p.Maps =  tMap
  for i := 0; i < size; i ++ {
var _key2 int64
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.Maps[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Car) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Car"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Car) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lists", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lists: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Lists)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Lists {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lists: ", p), err) }
  return err
}

func (p *Car) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sets", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sets: ", p), err) }
  if err := oprot.WriteSetBegin(ctx, thrift.STRING, len(p.Sets)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Sets); i++ {
    for j := i+1; j<len(p.Sets); j++ {
      if func(tgt, src string) bool {
        if tgt != src { return false }
        return true
      }(p.Sets[i], p.Sets[j]) {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Sets))
      }
    }
  }
  for _, v := range p.Sets {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(ctx); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sets: ", p), err) }
  return err
}

func (p *Car) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maps", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maps: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I64, thrift.STRING, len(p.Maps)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Maps {
    if err := oprot.WriteI64(ctx, int64(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maps: ", p), err) }
  return err
}

func (p *Car) Equals(other *Car) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Lists) != len(other.Lists) { return false }
  for i, _tgt := range p.Lists {
    _src4 := other.Lists[i]
    if _tgt != _src4 { return false }
  }
  if len(p.Sets) != len(other.Sets) { return false }
  for i, _tgt := range p.Sets {
    _src5 := other.Sets[i]
    if _tgt != _src5 { return false }
  }
  if len(p.Maps) != len(other.Maps) { return false }
  for k, _tgt := range p.Maps {
    _src6 := other.Maps[k]
    if _tgt != _src6 { return false }
  }
  return true
}

func (p *Car) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Car(%+v)", *p)
}

// Attributes:
//  - Red
//  - Green
//  - Blue
type Pixel struct {
  Red int32 `thrift:"Red,1,required" db:"Red" json:"Red"`
  Green int32 `thrift:"Green,2,required" db:"Green" json:"Green"`
  Blue int32 `thrift:"Blue,3,required" db:"Blue" json:"Blue"`
}

func NewPixel() *Pixel {
  return &Pixel{}
}


func (p *Pixel) GetRed() int32 {
  return p.Red
}

func (p *Pixel) GetGreen() int32 {
  return p.Green
}

func (p *Pixel) GetBlue() int32 {
  return p.Blue
}
func (p *Pixel) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRed bool = false;
  var issetGreen bool = false;
  var issetBlue bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRed = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetGreen = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetBlue = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRed{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Red is not set"));
  }
  if !issetGreen{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Green is not set"));
  }
  if !issetBlue{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Blue is not set"));
  }
  return nil
}

func (p *Pixel)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Red = v
}
  return nil
}

func (p *Pixel)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Green = v
}
  return nil
}

func (p *Pixel)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Blue = v
}
  return nil
}

func (p *Pixel) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Pixel"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pixel) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Red", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:Red: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Red)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Red (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:Red: ", p), err) }
  return err
}

func (p *Pixel) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Green", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Green: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Green)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Green (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Green: ", p), err) }
  return err
}

func (p *Pixel) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "Blue", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Blue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Blue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.Blue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Blue: ", p), err) }
  return err
}

func (p *Pixel) Equals(other *Pixel) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Red != other.Red { return false }
  if p.Green != other.Green { return false }
  if p.Blue != other.Blue { return false }
  return true
}

func (p *Pixel) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pixel(%+v)", *p)
}

// Attributes:
//  - Pixel
//  - Value
type Pixel_TypeDef struct {
  Pixel *Pixel `thrift:"pixel,1" db:"pixel" json:"pixel,omitempty"`
  Value *int32 `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewPixel_TypeDef() *Pixel_TypeDef {
  return &Pixel_TypeDef{}
}

var Pixel_TypeDef_Pixel_DEFAULT *Pixel
func (p *Pixel_TypeDef) GetPixel() *Pixel {
  if !p.IsSetPixel() {
    return Pixel_TypeDef_Pixel_DEFAULT
  }
return p.Pixel
}
var Pixel_TypeDef_Value_DEFAULT int32
func (p *Pixel_TypeDef) GetValue() int32 {
  if !p.IsSetValue() {
    return Pixel_TypeDef_Value_DEFAULT
  }
return *p.Value
}
func (p *Pixel_TypeDef) CountSetFieldsPixel_TypeDef() int {
  count := 0
  if (p.IsSetPixel()) {
    count++
  }
  if (p.IsSetValue()) {
    count++
  }
  return count

}

func (p *Pixel_TypeDef) IsSetPixel() bool {
  return p.Pixel != nil
}

func (p *Pixel_TypeDef) IsSetValue() bool {
  return p.Value != nil
}

func (p *Pixel_TypeDef) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Pixel_TypeDef)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Pixel = &Pixel{}
  if err := p.Pixel.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Pixel), err)
  }
  return nil
}

func (p *Pixel_TypeDef)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *Pixel_TypeDef) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsPixel_TypeDef(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "Pixel_TypeDef"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pixel_TypeDef) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPixel() {
    if err := oprot.WriteFieldBegin(ctx, "pixel", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pixel: ", p), err) }
    if err := p.Pixel.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Pixel), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pixel: ", p), err) }
  }
  return err
}

func (p *Pixel_TypeDef) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin(ctx, "value", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *Pixel_TypeDef) Equals(other *Pixel_TypeDef) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Pixel.Equals(other.Pixel) { return false }
  if p.Value != other.Value {
    if p.Value == nil || other.Value == nil {
      return false
    }
    if (*p.Value) != (*other.Value) { return false }
  }
  return true
}

func (p *Pixel_TypeDef) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pixel_TypeDef(%+v)", *p)
}

// Attributes:
//  - Code
//  - Msg
type BizException struct {
  Code int32 `thrift:"code,1,required" db:"code" json:"code"`
  Msg string `thrift:"msg,2,required" db:"msg" json:"msg"`
}

func NewBizException() *BizException {
  return &BizException{}
}


func (p *BizException) GetCode() int32 {
  return p.Code
}

func (p *BizException) GetMsg() string {
  return p.Msg
}
func (p *BizException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetMsg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetMsg = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"));
  }
  return nil
}

func (p *BizException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *BizException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *BizException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BizException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BizException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *BizException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *BizException) Equals(other *BizException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Msg != other.Msg { return false }
  return true
}

func (p *BizException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BizException(%+v)", *p)
}

func (p *BizException) Error() string {
  return p.String()
}

func (BizException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*BizException)(nil)

